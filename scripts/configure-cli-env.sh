#!/bin/bash

# API-Direct CLI Environment Configuration Script
# This script extracts Terraform outputs and creates environment variables for the CLI

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}=== API-Direct CLI Environment Configuration ===${NC}"

# Check if outputs.json exists
OUTPUTS_FILE="$(dirname "$0")/../outputs.json"
if [ ! -f "$OUTPUTS_FILE" ]; then
    echo -e "${RED}outputs.json not found. Please run deploy-infrastructure.sh first.${NC}"
    exit 1
fi

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}jq is not installed. Please install it to parse JSON outputs.${NC}"
    echo -e "${YELLOW}On macOS: brew install jq${NC}"
    echo -e "${YELLOW}On Ubuntu: sudo apt-get install jq${NC}"
    exit 1
fi

echo -e "\n${YELLOW}Extracting configuration from Terraform outputs...${NC}"

# Extract values from outputs.json
REGION=$(jq -r '.platform_config.value.region' "$OUTPUTS_FILE")
COGNITO_POOL_ID=$(jq -r '.platform_config.value.cognito.user_pool_id' "$OUTPUTS_FILE")
COGNITO_CLIENT_ID=$(jq -r '.platform_config.value.cognito.cli_client_id' "$OUTPUTS_FILE")
COGNITO_AUTH_DOMAIN=$(jq -r '.platform_config.value.cognito.auth_domain' "$OUTPUTS_FILE")
API_GATEWAY_ENDPOINT=$(jq -r '.api_gateway_endpoint.value' "$OUTPUTS_FILE")
EKS_CLUSTER_NAME=$(jq -r '.platform_config.value.eks.cluster_name' "$OUTPUTS_FILE")

# Create .env file
ENV_FILE="$(dirname "$0")/../.env"
cat > "$ENV_FILE" << EOF
# API-Direct CLI Environment Variables
# Generated by configure-cli-env.sh on $(date)

# AWS Configuration
export APIDIRECT_REGION=${REGION}

# Cognito Configuration
export APIDIRECT_COGNITO_POOL=${COGNITO_POOL_ID}
export APIDIRECT_COGNITO_CLIENT=${COGNITO_CLIENT_ID}
export APIDIRECT_AUTH_DOMAIN=${COGNITO_AUTH_DOMAIN}

# API Configuration
export APIDIRECT_API_ENDPOINT=${API_GATEWAY_ENDPOINT}

# EKS Configuration
export APIDIRECT_EKS_CLUSTER=${EKS_CLUSTER_NAME}

# Development Settings
export APIDIRECT_ENV=development
EOF

echo -e "${GREEN}âœ“ Environment configuration saved to .env${NC}"

# Create shell configuration snippet
SHELL_CONFIG="$(dirname "$0")/../cli-env.sh"
cat > "$SHELL_CONFIG" << EOF
#!/bin/bash
# API-Direct CLI Environment Variables
# Source this file to configure your shell: source cli-env.sh

export APIDIRECT_REGION="${REGION}"
export APIDIRECT_COGNITO_POOL="${COGNITO_POOL_ID}"
export APIDIRECT_COGNITO_CLIENT="${COGNITO_CLIENT_ID}"
export APIDIRECT_AUTH_DOMAIN="${COGNITO_AUTH_DOMAIN}"
export APIDIRECT_API_ENDPOINT="${API_GATEWAY_ENDPOINT}"
export APIDIRECT_EKS_CLUSTER="${EKS_CLUSTER_NAME}"
export APIDIRECT_ENV="development"

echo "API-Direct CLI environment configured!"
echo "  Region: \$APIDIRECT_REGION"
echo "  API Endpoint: \$APIDIRECT_API_ENDPOINT"
echo "  EKS Cluster: \$APIDIRECT_EKS_CLUSTER"
EOF

chmod +x "$SHELL_CONFIG"

# Update kubeconfig for EKS
echo -e "\n${YELLOW}Updating kubeconfig for EKS cluster...${NC}"
aws eks update-kubeconfig --region "$REGION" --name "$EKS_CLUSTER_NAME" || {
    echo -e "${YELLOW}Warning: Could not update kubeconfig. You may need to run this manually:${NC}"
    echo -e "aws eks update-kubeconfig --region $REGION --name $EKS_CLUSTER_NAME"
}

echo -e "\n${GREEN}=== Configuration complete! ===${NC}"
echo -e "\n${YELLOW}To use these environment variables:${NC}"
echo -e "1. In your current shell: ${GREEN}source cli-env.sh${NC}"
echo -e "2. For all shells: Add the above command to your ~/.bashrc or ~/.zshrc"
echo -e "\n${YELLOW}Next steps:${NC}"
echo -e "1. Source the environment: source cli-env.sh"
echo -e "2. Build the CLI: cd cli && go build -o apidirect"
echo -e "3. Test login: ./apidirect login"
