version: '3.8'

services:
  # Storage Service
  storage:
    build:
      context: ./services/storage
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - CODE_STORAGE_BUCKET=${CODE_STORAGE_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - api-direct

  # Deployment Service  
  deployment:
    build:
      context: ./services/deployment
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - DEPLOYMENT_NAMESPACE=api-direct-apis
      - KUBECONFIG=/root/.kube/config
    volumes:
      - ~/.kube:/root/.kube:ro  # Mount kubeconfig for K8s access
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - api-direct

  # Gateway Service (Future)
  # gateway:
  #   build:
  #     context: ./services/gateway
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - PORT=8082
  #   networks:
  #     - api-direct

  # Local PostgreSQL for development (optional - use RDS in production)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=apidirect
      - POSTGRES_PASSWORD=localdevpassword
      - POSTGRES_DB=apidirect
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apidirect"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-direct

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-direct

  # LocalStack for AWS services in development (optional)
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"  # LocalStack gateway
      - "4571:4571"  # Elasticsearch
    environment:
      - SERVICES=s3,cognito,secretsmanager,cloudwatch
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "${TMPDIR:-/tmp}/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - api-direct

volumes:
  postgres_data:
  redis_data:

networks:
  api-direct:
    driver: bridge
